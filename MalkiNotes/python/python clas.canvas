{
	"nodes":[
		{"id":"91a5b4447981763e","type":"text","text":"# Working with Dictionaries in Python\n\n## Creating a Dictionary\n\nA dictionary stores key-value pairs.\n\n```python\nmy_dict = {\n    \"name\": \"Alice\",\n    \"age\": 25,\n    \"city\": \"New York\"\n}\n```\n\n## Accessing Values\n\n```python\nprint(\"Name:\", my_dict[\"name\"])  # Output: Alice\nprint(\"Age:\", my_dict[\"age\"])    # Output: 25\n```\n\n## Adding a New Key-Value Pair\n\n```python\nmy_dict[\"email\"] = \"alice@example.com\"\nprint(\"Updated dictionary:\", my_dict)\n```\n\n## Updating an Existing Value\n\n```python\nmy_dict[\"age\"] = 26\nprint(\"Updated age:\", my_dict[\"age\"])\n```\n\n## Removing a Key-Value Pair\n\n```python\ndel my_dict[\"city\"]\nprint(\"Dictionary after deletion:\", my_dict)\n```\n\n## Using `.get()` to Access Values Safely\n\n```python\nprint(\"Phone:\", my_dict.get(\"phone\", \"Key not found\"))\n```\n\n## Removing a Key-Value Pair Using `.pop()`\n\n```python\nremoved_value = my_dict.pop(\"age\", \"Key not found\")\nprint(\"Removed value:\", removed_value)\nprint(\"Dictionary after pop:\", my_dict)\n```\n\n## Iterating Through a Dictionary\n\n- **Keys:**\n\n```python\nfor key in my_dict:\n    print(\"Key:\", key)\n```\n\n- **Values:**\n\n```python\nfor value in my_dict.values():\n    print(\"Value:\", value)\n```\n\n- **Key-Value Pairs:**\n\n```python\nfor key, value in my_dict.items():\n    print(f\"Key: {key}, Value: {value}\")\n```\n\n## Checking if a Key Exists\n\n```python\nif \"name\" in my_dict:\n    print(\"Name is a key in the dictionary\")\n```\n\n## Getting the Length of a Dictionary\n\n```python\nprint(\"Length of dictionary:\", len(my_dict))\n```\n\n## Using `.keys()` and `.values()`\n\n```python\nkeys_list = list(my_dict.keys())\nvalues_list = list(my_dict.values())\nprint(\"Keys:\", keys_list)\nprint(\"Values:\", values_list)\n```\n\n## Copying a Dictionary\n\n```python\nnew_dict = my_dict.copy()\nprint(\"Copied dictionary:\", new_dict)\n```\n\n## Merging Dictionaries\n\n```python\nanother_dict = {\"country\": \"USA\", \"age\": 27}\nmy_dict.update(another_dict)\nprint(\"Updated dictionary after merging:\", my_dict)\n```\n\n## Clearing a Dictionary\n\n```python\nmy_dict.clear()\nprint(\"Cleared dictionary:\", my_dict)\n```\n\n## Using `dict()` Constructor\n\n```python\nnew_dict = dict(name=\"Bob\", age=30, city=\"San Francisco\")\nprint(\"New dictionary:\", new_dict)\n```\n\n## Dictionary Comprehension\n\n```python\nsquared_numbers = {x: x**2 for x in range(1, 6)}\nprint(\"Squared numbers dictionary:\", squared_numbers)\n```","x":-900,"y":140,"width":726,"height":500,"color":"3"},
		{"id":"406841b53f08029b","type":"text","text":"# Python List Operations & Matrix Handling\n\n## List Basics & Operations\n\n### Creating a List\n\n```python\nll = [x for x in range(0,7)]\nprint(ll)  # Output: [0, 1, 2, 3, 4, 5, 6]\n```\n\n### Appending Elements\n\n- `.append(value)`: Adds a value to the end of the list.\n\n```python\nll.append(45)\nll.append(23)\nprint(ll)  # Output: [0, 1, 2, 3, 4, 5, 6, 45, 23]\n```\n\n### Extending a List\n\n- `.extend([list])`: Adds elements from another list.\n\n```python\nll.extend([56,43])\nprint(ll)  # Output: [0, 1, 2, 3, 4, 5, 6, 45, 23, 56, 43]\n```\n\n### Inserting Elements\n\n- `.insert(index, value)`: Inserts value at the given index.\n\n```python\nll.insert(6, 5)\nprint(ll)  # Output: [0, 1, 2, 3, 4, 5, 5, 6, 45, 23, 56, 43]\n```\n\n### Copying Lists\n\n- `.copy()`: Creates a duplicate list but maintains reference integrity.\n\n```python\nll2 = ll.copy()\n```\n\n### Sorting a List\n\n- `.sort()`: Sorts the list in-place.\n\n```python\nll2.sort()\nprint(ll2)\nprint(ll)  # Original list remains unsorted\n```\n\n- `sorted(list)`: Returns a sorted list without modifying the original.\n\n```python\nlltri = list(sorted(ll))\nprint(lltri)\n```\n\n### Reversing a List\n\n- `.reverse()`: Reverses the order of elements.\n\n```python\nll2.reverse()\nprint(ll2)\n```\n\n### Clearing a List\n\n- `.clear()`: Removes all elements.\n\n```python\nll2.clear()\nprint(ll2)  # Output: []\n```\n\n### Using Loops with Lists\n\n```python\nli2 = [a for a in range(0,5)]\nfor i in range(len(li2)):\n    li2[i] = 2**i\nprint(li2)  # Output: [1, 2, 4, 8, 16]\n```\n\n### Applying Functions to Lists with `map()`\n\n- `map(function, list)`: Applies a function to each element.\n\n```python\ndef anyfunction(x: float):\n    return 2*x\n\nE = list(map(anyfunction, li2))\nprint(E)  # Output: [2, 4, 8, 16, 32]\n```\n\n## List Comparison\n\n```python\nlist1 = []\nlist2 = []\nlist3 = list1\n\nprint(list1 == list2)  # True: Same content\nprint(list1 is list2)  # False: Different memory locations\nprint(list1 == list3)  # True: Same content\nprint(list1 is list3)  # True: Same memory reference\n```\n\n## Matrices in Python\n\nA matrix is a list of lists.\n\n```python\nmatrix = [['G', 'G', 'G', '', ''],\n        ['F', 'F', '', '', ''],\n        ['F', 'F', '', 'G', 'G'],\n        ['', '', '', '', ''],\n        ['G', 'G', 'G', 'G', 'G']]\n```\n\n### Counting Elements in a Matrix\n\n```python\nfor i in range(len(matrix)):\n    pers = {\"garcons\": 0, \"filles\": 0, \"vide\": 0}\n    for j in range(len(matrix[i])):\n        if matrix[i][j] == 'G':\n            pers[\"garcons\"] += 1\n        elif matrix[i][j] == 'F':\n            pers[\"filles\"] += 1\n        else:\n            pers[\"vide\"] += 1\n    print(pers)\n```\n\n### Printing the Matrix\n\n```python\nfor i in range(len(matrix)):\n    for j in range(len(matrix[i])):\n        if matrix[i][j] == 'G':\n            print(\"G\", end=\" \")\n        elif matrix[i][j] == 'F':\n            print(\"F\", end=\" \")\n        else:\n            print(\"-\", end=\" \")\n    print()\n```\n\n## String Operations\n\n```python\nch1 = \"helllllo\"\nprint(ch1.index(\"l\"))  # Finds first 'l'\nprint(ch1.count(\"l\"))  # Counts occurrences of 'l'\nprint(ch1.find(\"l\"))   # Same as index()\n```","x":-900,"y":-400,"width":726,"height":500,"color":"1"},
		{"id":"3fd22afcff2b930b","type":"text","text":"# Comparing Sets in Python\n\nSets are unordered collections of unique elements. Comparing sets ignores the order and considers only the elements.\n\n## Basic Set Comparison\n\n```python\nprint({2, 1} == {1, 2})  # True, because sets are unordered collections of unique elements\nprint({2, 1} == {1, 2, 2})  # True, because duplicates are removed in sets\n```\n\n## Set Operations\n\n```python\nset_a = {1, 2, 3}\nset_b = {3, 4, 5}\n```\n\n### Union\n\nCombines all unique elements from both sets.\n\n```python\nprint(set_a | set_b)  # Output: {1, 2, 3, 4, 5}\n```\n\n### Intersection\n\nFinds common elements in both sets.\n\n```python\nprint(set_a & set_b)  # Output: {3}\n```\n\n### Difference\n\nFinds elements that are in one set but not the other.\n\n```python\nprint(set_a - set_b)  # Output: {1, 2}\nprint(set_b - set_a)  # Output: {4, 5}\n```\n\n### Symmetric Difference\n\nFinds elements that are in either set, but not in both.\n\n```python\nprint(set_a ^ set_b)  # Output: {1, 2, 4, 5}\n```\n\nSets are useful for operations requiring uniqueness and fast membership testing.","x":-140,"y":-400,"width":726,"height":500,"color":"2"},
		{"id":"b35a126a6fc047cd","type":"text","text":"# Working with Tuples in Python\n\n## Creating an Empty Tuple\n\n```python\ntuple1 = ()\n```\n\n## Properties of Tuples\n\nTuples are similar to lists but are **immutable**, meaning you cannot modify them after creation.\n\n### Creating a Tuple with Elements\n\n```python\ntuple2 = (1, 2, 3, 4, 5)\n```\n\n### Accessing Elements\n\n```python\nprint(tuple2[0])  # Output: 1\n```\n\n### Tuples with Different Data Types\n\n```python\ntuple3 = (1, \"hello\", 3.14)\n```\n\n### Concatenating Tuples\n\n```python\ntuple4 = tuple2 + tuple3\n```\n\n### Multiple Assignment with Tuples\n\n```python\na, b, c = (1, 2, 3)\nprint(a, b, c)  # Output: 1 2 3\n```\n\n---\n\n## Difference Between Lists and Tuples\n\n### Lists Can Be Modified\n\n```python\nlist1 = [1, 2, 3]\nlist1[0] = 10  # Allowed\nprint(list1)  # Output: [10, 2, 3]\n```\n\n### Tuples Cannot Be Modified\n\n```python\ntry:\n    tuple2[0] = 10  # This will raise an error\nexcept TypeError as e:\n    print(e)  # Output: 'tuple' object does not support item assignment\n```\n\n---\n\n## Modifying a Tuple (Workaround)\n\nSince tuples are immutable, to \"modify\" them, convert them to a list, change the list, and convert it back to a tuple.\n\n### Appending to a Tuple\n\n```python\nlist2 = list(tuple2)\nlist2.append(6)\ntuple2 = tuple(list2)\nprint(tuple2)  # Output: (1, 2, 3, 4, 5, 6)\n```\n\n### Removing an Element from a Tuple\n\n```python\nlist2.remove(3)\ntuple2 = tuple(list2)\nprint(tuple2)  # Output: (1, 2, 4, 5, 6)\n```\n\n---\n\n## Concatenating Tuples\n\n```python\ntupleConcat = tuple2 + tuple3\nprint(tupleConcat)\n```","x":-140,"y":140,"width":726,"height":500,"color":"4"},
		{"id":"e69bf92f286765b6","type":"text","text":"# Lists vs Tuples in Nested Structures\n\n## Lists Inside Tuples and Mutability\n\n```python\nclientL = [\"Jean\", \"Pierre\", 19]\nprint(\"liste:\")\nprint(f\"nom : {clientL[0]}, prenom : {clientL[1]}, age : {clientL[2]}\")\nclientT = tuple(clientL)\nprint(\"tuple:\")\nprint(f\"nom : {clientT[0]}, prenom : {clientT[1]}, age : {clientT[2]}\")\nprint()\n\nprint(\"pierre devient Ives\")\nprint()\n\nclientL[1] = \"Ives\"\nprint(\"liste:\")\nprint(f\"nom : {clientL[0]}, prenom : {clientL[1]}, age : {clientL[2]}\")\nprint(\"tuple:\")\nprint(f\"nom : {clientT[0]}, prenom : {clientT[1]}, age : {clientT[2]}\")\n```\n\n## Nested Lists Inside Tuples\n\n```python\nlistedl = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntupledl = tuple(listedl)\nprint(\"liste:\")\nprint(listedl)\nprint(\"tuple:\")\nprint(tupledl)\n\nlistedl[1][1] = 999\nprint(\"liste:\")\nprint(listedl)\nprint(\"tuple:\")\nprint(tupledl) \n #output : [1, 2, 3, 4, 5, 6, 7, 8, 8]\n```\n\n## Explanation:\n\nIf a **list inside a tuple** is modified, the tuple remains unchanged, but the modifications inside the nested list are reflected. This happens because the tuple stores a reference to the list, not a copy.","x":586,"y":140,"width":726,"height":500,"color":"4"},
		{"id":"a5c11e7be76058aa","type":"file","file":"map/map.canvas","x":-1200,"y":-300,"width":220,"height":225}
	],
	"edges":[]
}